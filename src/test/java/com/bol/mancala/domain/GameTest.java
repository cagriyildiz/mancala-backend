package com.bol.mancala.domain;

import com.bol.mancala.repository.GameRepository;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;

import java.util.Arrays;
import java.util.Iterator;
import java.util.stream.IntStream;

import static com.bol.mancala.domain.Board.BOARD_SIZE_X;
import static com.bol.mancala.domain.Board.BOARD_SIZE_Y;
import static com.bol.mancala.domain.Game.DEFAULT_INITIAL_STONE_COUNT;
import static com.bol.mancala.domain.Game.MIN_INITIAL_STONE_COUNT;
import static org.junit.jupiter.api.Assertions.*;

@DisplayName("Test Game JPA Entity")
@DataJpaTest
class GameTest {

  protected static final long FIRST_PLAYER_ID = 1L;
  protected static final long SECOND_PLAYER_ID = 2L;

  @Autowired
  private GameRepository repository;

  @Autowired
  private TestEntityManager entityManager;

  @DisplayName("Create Game Entity With Complete Input")
  @Test
  void testEntityCreationWithCompleteInput() {
    Game game = Game.builder()
        .firstPlayerId(FIRST_PLAYER_ID)
        .secondPlayerId(SECOND_PLAYER_ID)
        .activePlayer(Game.PlayerOrder.SECOND)
        .initialStoneCount(MIN_INITIAL_STONE_COUNT)
        .build();

    Game newGame = repository.save(game);
    entityManager.flush();

    // check auto generated fields are filled
    verifyAutoGeneratedFields(newGame);

    // check values are assigned correctly
    assertEquals(FIRST_PLAYER_ID, newGame.getFirstPlayerId());
    assertEquals(SECOND_PLAYER_ID, newGame.getSecondPlayerId());
    assertEquals(Game.PlayerOrder.SECOND, newGame.getActivePlayer());
    assertEquals(MIN_INITIAL_STONE_COUNT, newGame.getInitialStoneCount());
  }

  @DisplayName("Create Game Entity With Only Required Input")
  @Test
  void testEntityCreationWithOnlyRequiredInput() {
    Game game = Game.builder()
        .firstPlayerId(FIRST_PLAYER_ID)
        .secondPlayerId(SECOND_PLAYER_ID)
        .build();

    Game newGame = repository.save(game);
    entityManager.flush();

    // check auto generated fields are filled
    verifyAutoGeneratedFields(newGame);

    // check values are assigned correctly
    assertEquals(FIRST_PLAYER_ID, newGame.getFirstPlayerId());
    assertEquals(SECOND_PLAYER_ID, newGame.getSecondPlayerId());

    // check values are initialized with defaults
    verifyDefaults(newGame);
  }

  private void verifyAutoGeneratedFields(Game newGame) {
    assertNotNull(newGame.getId());
    assertNotNull(newGame.getVersion());
    assertNotNull(newGame.getCreatedDate());
    assertNotNull(newGame.getLastModifiedDate());
    assertNotNull(newGame.getBoard());
  }

  private void verifyDefaults(Game newGame) {
    assertEquals(Game.PlayerOrder.FIRST, newGame.getActivePlayer());
    assertEquals(DEFAULT_INITIAL_STONE_COUNT, newGame.getInitialStoneCount());
    verifyDefaultBoard(newGame);
  }

  private void verifyDefaultBoard(Game game) {
    Board board = game.getBoard();
    int[][] pits = board.getPits();
    assertEquals(BOARD_SIZE_Y, pits.length);
    assertEquals(BOARD_SIZE_X, pits[0].length);
    verifyPits(pits, game.getInitialStoneCount());
  }

  private void verifyPits(int[][] pits, int initialStoneCount) {
    int[][] expectedPits = getExpectedPits(initialStoneCount);
    IntStream expectedPitsStream = Arrays.stream(expectedPits).flatMapToInt(Arrays::stream);
    IntStream actualPitsStream = Arrays.stream(pits).flatMapToInt(Arrays::stream);
    isStreamsEqual(expectedPitsStream, actualPitsStream);
  }

  private void isStreamsEqual(IntStream stream1, IntStream stream2) {
    Iterator<Integer> iterator1 = stream1.iterator();
    Iterator<Integer> iterator2 = stream2.iterator();

    // check every value is equal in both collection
    while (iterator1.hasNext() && iterator2.hasNext()) {
      assertEquals(iterator1.next(), iterator2.next());
    }

    // check if no other value is left in both collection
    assertFalse(iterator1.hasNext());
    assertFalse(iterator2.hasNext());
  }

  private int[][] getExpectedPits(int initialStoneCount) {
    int[][] expectedPits = new int[BOARD_SIZE_Y][BOARD_SIZE_X];
    for (int i = 0; i < BOARD_SIZE_Y; i++) {
      Arrays.fill(expectedPits[i], 0, BOARD_SIZE_X - 1, initialStoneCount);
    }
    return expectedPits;
  }

}
