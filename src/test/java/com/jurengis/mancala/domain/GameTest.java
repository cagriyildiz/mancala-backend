package com.jurengis.mancala.domain;

import com.jurengis.mancala.repository.GameRepository;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static com.jurengis.mancala.domain.Board.BOARD_SIZE_X;
import static com.jurengis.mancala.domain.Board.BOARD_SIZE_Y;
import static com.jurengis.mancala.domain.Game.DEFAULT_INITIAL_STONE_COUNT;
import static com.jurengis.mancala.domain.Game.MIN_INITIAL_STONE_COUNT;
import static org.junit.jupiter.api.Assertions.*;

@DisplayName("Test Game JPA Entity")
@DataJpaTest
class GameTest {

  protected static final long FIRST_PLAYER_ID = 1L;
  protected static final long SECOND_PLAYER_ID = 2L;

  @Autowired
  private GameRepository repository;

  @Autowired
  private TestEntityManager entityManager;

  @DisplayName("Create Game Entity With Complete Input")
  @Test
  void testEntityCreationWithCompleteInput() {
    Game game = Game.builder()
        .firstPlayerId(FIRST_PLAYER_ID)
        .secondPlayerId(SECOND_PLAYER_ID)
        .activePlayer(Game.PlayerOrder.SECOND)
        .initialStoneCount(MIN_INITIAL_STONE_COUNT)
        .build();

    Game newGame = repository.save(game);
    entityManager.flush();

    // check auto generated fields are filled
    verifyAutoGeneratedFields(newGame);

    // check values are assigned correctly
    assertEquals(FIRST_PLAYER_ID, newGame.getFirstPlayerId());
    assertEquals(SECOND_PLAYER_ID, newGame.getSecondPlayerId());
    assertEquals(Game.PlayerOrder.SECOND, newGame.getActivePlayer());
    assertEquals(MIN_INITIAL_STONE_COUNT, newGame.getInitialStoneCount());
  }

  @DisplayName("Create Game Entity With Only Required Input")
  @Test
  void testEntityCreationWithOnlyRequiredInput() {
    Game game = Game.builder()
        .firstPlayerId(FIRST_PLAYER_ID)
        .secondPlayerId(SECOND_PLAYER_ID)
        .build();

    Game newGame = repository.save(game);
    entityManager.flush();

    // check auto generated fields are filled
    verifyAutoGeneratedFields(newGame);

    // check values are assigned correctly
    assertEquals(FIRST_PLAYER_ID, newGame.getFirstPlayerId());
    assertEquals(SECOND_PLAYER_ID, newGame.getSecondPlayerId());

    // check values are initialized with defaults
    verifyDefaults(newGame);
  }

  private void verifyAutoGeneratedFields(Game newGame) {
    assertNotNull(newGame.getId());
    assertNotNull(newGame.getVersion());
    assertNotNull(newGame.getCreatedDate());
    assertNotNull(newGame.getLastModifiedDate());
    assertNotNull(newGame.getBoard());
    assertNull(newGame.getWinner());
    assertFalse(newGame.isFinished());
  }

  private void verifyDefaults(Game newGame) {
    assertEquals(Game.PlayerOrder.FIRST, newGame.getActivePlayer());
    assertEquals(DEFAULT_INITIAL_STONE_COUNT, newGame.getInitialStoneCount());
    verifyDefaultBoard(newGame);
  }

  private void verifyDefaultBoard(Game game) {
    Board board = game.getBoard();
    List<State> gameState = board.getState();
    assertNotNull(gameState);
    assertEquals(BOARD_SIZE_Y, gameState.size());
    assertEquals(BOARD_SIZE_X, gameState.get(0).getPits().size());
    verifyGameState(gameState, game.getInitialStoneCount());
  }

  private void verifyGameState(List<State> state, int initialStoneCount) {
    List<State> expectedGameState = getExpectedGameState(initialStoneCount);
    isPitsAreEqual(expectedGameState.get(0).getPits(), state.get(0).getPits());
    isPitsAreEqual(expectedGameState.get(1).getPits(), state.get(1).getPits());
  }

  private void isPitsAreEqual(List<Pit> expected, List<Pit> actual) {
    assertEquals(expected.size(), actual.size());
    assertEquals(expected.size(), actual.size());

    Iterator<Pit> iteratorExpected = expected.iterator();
    Iterator<Pit> iteratorActual = actual.iterator();

    // check every value is equal in both collection
    while (iteratorExpected.hasNext() && iteratorActual.hasNext()) {
      Pit pitExpected = iteratorExpected.next();
      Pit pitActual = iteratorActual.next();
      assertEquals(pitExpected.getType(), pitActual.getType());
      assertEquals(pitExpected.getStoneCount(), pitActual.getStoneCount());
    }

    // check if no other value is left in both collection
    assertFalse(iteratorExpected.hasNext());
    assertFalse(iteratorActual.hasNext());
  }

  private List<State> getExpectedGameState(int initialStoneCount) {
    List<State> state = new ArrayList<>();
    for (int i = 0; i < BOARD_SIZE_Y; i++) {
      state.add(createNewGameState(initialStoneCount));
    }
    return state;
  }

  private State createNewGameState(int initialStoneCount) {
    List<Pit> pits = new ArrayList<>(BOARD_SIZE_X);
    for (int i = 0; i < BOARD_SIZE_X - 1; i++) {
      Pit pit = createPit(Pit.Type.LITTLE, initialStoneCount);
      pits.add(pit);
    }
    Pit pit = createPit(Pit.Type.BIG, 0);
    pits.add(pit);
    return State.builder().pits(pits).build();
  }

  private Pit createPit(Pit.Type type, int stoneCount) {
    return Pit.builder()
        .type(type)
        .stoneCount(stoneCount)
        .build();
  }

}
